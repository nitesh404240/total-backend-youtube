Controllers Folder Structure
The controllers folder usually contains multiple files, each responsible for handling different parts of your application. For example:

controllers/userController.js — Handles user-related actions (e.g., registration, login, profile update).

controllers/productController.js — Handles product-related actions (e.g., creating a product, listing products).

controllers/orderController.js — Handles order-related actions (e.g., placing an order, viewing orders).

controllers/authController.js — Handles authentication logic (e.g., login, logout).

So, the controllers/userController.js file would not be the only file. You would need other controllers depending on the features of your app.\




//////////////http status codes

//| Code | Usage Example                        |
// | ---- | ------------------------------------ |
// | 200  | Successful GET/POST request          |
// | 201  | New user/resource created            |
// | 400  | Missing form field or bad JSON       |
// | 401  | Not logged in or token missing       |
// | 403  | Trying to access someone else’s data |
// | 404  | Page or API route not found          |
// | 409  | User already exists                  |
// | 500  | Server crash, DB error, etc.         |


//what we passes in this this will shown up in postman in

//this is production based knowlendge


//////======login user=====////

if this field we will fetch the username ,password and email from the req.body 
 now we will check the username and email in the database if they exist then we will match the password 
 //if the password matches we will provide  a access token to the user 

 //refresh token helps to generate a new access token when the old acceess token expires keeped us login in the app 
 //if the refresh token expired we have to relogin in the system 

             ┌────────────────────────────┐
            │        Frontend (Browser)  │
            └────────────────────────────┘
                         │
                         ▼
              User logs in (POST /login)
                         │
                         ▼
            ┌────────────────────────────┐
            │      Backend (Server)      │
            └────────────────────────────┘
                         │
        ┌────────[ Validate credentials ]────────┐
        │                                        │
        ▼                                        ▼
[ Generate accessToken ]                [ Generate refreshToken ]
                         │
                         ▼
[ Store refreshToken in DB (user.refreshToken = ...) ]
                         │
                         ▼
[ Send both tokens as cookies in response ]
                         │
                         ▼
         ┌────────────────────────────────────┐
         │ Browser stores cookies like:       │
         │ - accessToken (15 min, HttpOnly)   │
         │ - refreshToken (7 days, HttpOnly)  │
         └────────────────────────────────────┘

                         │
         ┌───────────────┴────────────────┐
         ▼                                ▼
     [ User visits protected route ]     [ Access token expires ]
     [ accessToken sent in Cookie ]           ▼
         ▼                               [ Browser sends refreshToken cookie ]
     [ Backend verifies accessToken ]    
         │
         ▼                                [ Server checks DBor refreshToken ]

     [ Access granted ]                    [ New accessToken (and maybe new refreshToken) issued ]
                                    ▼
                            [ Server sets new cookies again ]
                                    ▼
                           [ Browser stores updated cookies ]

 accessToken (stored in browser)===========
Name: accessToken
Value: eyJhbGciOiJIUzI1NiIs...
HttpOnly: true
Secure: true
Expires: in 15 minutes


 refreshToken (stored in browser) =========
Name: refreshToken
Value: eyJhbGciOiJIUzI1NiIs...
HttpOnly: true
Secure: true
Expires: in 7 days


Bhuvneshchoudhar2yj12aat06@gmail.com1115555   123456789


story of token =================
| Step                                 | What Happens                       | Where Are You (UI)?    |
| ------------------------------------ | ---------------------------------- | ---------------------- |
| 1. User opens site                   | Sees **login page** (frontend)     | Login UI               |
| 2. User submits email + password     | Request goes to `/login` API       | Login UI still         |
| 3. Server checks credentials         | If correct → generates tokens      | Still login UI         |
| 4. Server sends tokens in cookies    | ✅ Access + Refresh sent            | Still login UI         |
| 5. Frontend sees success → redirects | You are **navigated to dashboard** | ✅ Now you’re on app UI |


refresh token = first fetch i from the reqested body or cookie then verify it with jwt if it verifies then 
finding the id from refresh token decoded and then finding the user by the help of it 
if user got found then match the incoming token with user database token if they match then 
generates a new refresh and accesstoken and sent them to the browser in cookie 